{"ast":null,"code":"import Dexie from 'dexie';\n\n// Configuration de la base de données IndexedDB\nclass TournamentDB extends Dexie {\n  constructor() {\n    super('FABTournamentDB');\n    this.version(1).stores({\n      tournaments: '++id, name, status, createdAt, updatedAt',\n      players: '++id, name, isActive, createdAt, updatedAt',\n      // Joueurs globaux\n      tournamentPlayers: '++id, tournamentId, playerId, hero, wins, losses, draws, points',\n      // Association tournoi-joueur\n      rounds: '++id, tournamentId, roundNumber, type, isComplete, createdAt',\n      matches: '++id, tournamentId, roundId, player1Id, player2Id, roundNumber, table, result, player1Games, player2Games, isActive'\n    });\n  }\n}\n\n// Instance de la base de données\nexport const db = new TournamentDB();\n\n// Service pour gérer les tournois\nexport class TournamentService {\n  // Créer un nouveau tournoi\n  static async createTournament(tournamentData) {\n    try {\n      const id = await db.tournaments.add(tournamentData);\n      return await db.tournaments.get(id);\n    } catch (error) {\n      console.error('Erreur lors de la création du tournoi:', error);\n      throw error;\n    }\n  }\n\n  // Récupérer tous les tournois\n  static async getAllTournaments() {\n    try {\n      return await db.tournaments.orderBy('createdAt').reverse().toArray();\n    } catch (error) {\n      console.error('Erreur lors de la récupération des tournois:', error);\n      throw error;\n    }\n  }\n\n  // Récupérer un tournoi par ID\n  static async getTournament(id) {\n    try {\n      return await db.tournaments.get(id);\n    } catch (error) {\n      console.error('Erreur lors de la récupération du tournoi:', error);\n      throw error;\n    }\n  }\n\n  // Mettre à jour un tournoi\n  static async updateTournament(id, updates) {\n    try {\n      await db.tournaments.update(id, {\n        ...updates,\n        updatedAt: new Date().toISOString()\n      });\n      return await db.tournaments.get(id);\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour du tournoi:', error);\n      throw error;\n    }\n  }\n\n  // Supprimer un tournoi et toutes ses données associées\n  static async deleteTournament(id) {\n    try {\n      await db.transaction('rw', db.tournaments, db.tournamentPlayers, db.rounds, db.matches, async () => {\n        await db.tournaments.delete(id);\n        await db.tournamentPlayers.where('tournamentId').equals(id).delete();\n        await db.rounds.where('tournamentId').equals(id).delete();\n        await db.matches.where('tournamentId').equals(id).delete();\n      });\n    } catch (error) {\n      console.error('Erreur lors de la suppression du tournoi:', error);\n      throw error;\n    }\n  }\n\n  // Récupérer les données complètes d'un tournoi\n  static async getTournamentData(tournamentId) {\n    try {\n      const [tournament, tournamentPlayers, rounds, matches] = await Promise.all([db.tournaments.get(tournamentId), db.tournamentPlayers.where('tournamentId').equals(tournamentId).toArray(), db.rounds.where('tournamentId').equals(tournamentId).toArray(), db.matches.where('tournamentId').equals(tournamentId).toArray()]);\n\n      // Récupérer les informations complètes des joueurs\n      const playerIds = tournamentPlayers.map(tp => tp.playerId);\n      const players = await db.players.where('id').anyOf(playerIds).toArray();\n\n      // Fusionner les données des joueurs avec leurs stats de tournoi\n      const playersWithTournamentData = tournamentPlayers.map(tp => {\n        const player = players.find(p => p.id === tp.playerId);\n        return {\n          ...player,\n          ...tp,\n          id: tp.playerId // Garder l'ID du joueur pour compatibilité\n        };\n      });\n      return {\n        tournament,\n        players: playersWithTournamentData,\n        rounds,\n        matches\n      };\n    } catch (error) {\n      console.error('Erreur lors de la récupération des données du tournoi:', error);\n      throw error;\n    }\n  }\n}\n\n// Service pour gérer les joueurs globaux\nexport class PlayerService {\n  // Créer un nouveau joueur global\n  static async createPlayer(playerData) {\n    try {\n      const player = {\n        ...playerData,\n        isActive: true,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      const id = await db.players.add(player);\n      return await db.players.get(id);\n    } catch (error) {\n      console.error('Erreur lors de la création du joueur:', error);\n      throw error;\n    }\n  }\n\n  // Récupérer tous les joueurs globaux\n  static async getAllPlayers() {\n    try {\n      return await db.players.orderBy('name').toArray();\n    } catch (error) {\n      console.error('Erreur lors de la récupération des joueurs:', error);\n      throw error;\n    }\n  }\n\n  // Mettre à jour un joueur global\n  static async updatePlayer(id, updates) {\n    try {\n      await db.players.update(id, {\n        ...updates,\n        updatedAt: new Date().toISOString()\n      });\n      return await db.players.get(id);\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour du joueur:', error);\n      throw error;\n    }\n  }\n\n  // Supprimer un joueur global\n  static async deletePlayer(id) {\n    try {\n      await db.players.delete(id);\n    } catch (error) {\n      console.error('Erreur lors de la suppression du joueur:', error);\n      throw error;\n    }\n  }\n}\n\n// Service pour gérer la participation des joueurs aux tournois\nexport class TournamentPlayerService {\n  // Ajouter un joueur à un tournoi\n  static async addPlayerToTournament(tournamentId, playerId, hero = null) {\n    try {\n      const existingEntry = await db.tournamentPlayers.where('tournamentId').equals(tournamentId).and(tp => tp.playerId === playerId).first();\n      if (existingEntry) {\n        throw new Error('Ce joueur est déjà inscrit à ce tournoi');\n      }\n      const tournamentPlayer = {\n        tournamentId,\n        playerId,\n        hero,\n        wins: 0,\n        losses: 0,\n        draws: 0,\n        points: 0,\n        isActive: true\n      };\n      const id = await db.tournamentPlayers.add(tournamentPlayer);\n      return await db.tournamentPlayers.get(id);\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du joueur au tournoi:', error);\n      throw error;\n    }\n  }\n\n  // Récupérer tous les joueurs d'un tournoi avec leurs informations complètes\n  static async getTournamentPlayers(tournamentId) {\n    try {\n      const tournamentPlayers = await db.tournamentPlayers.where('tournamentId').equals(tournamentId).toArray();\n      const playerIds = tournamentPlayers.map(tp => tp.playerId);\n      const players = await db.players.where('id').anyOf(playerIds).toArray();\n      return tournamentPlayers.map(tp => {\n        const player = players.find(p => p.id === tp.playerId);\n        return {\n          ...player,\n          ...tp,\n          id: tp.playerId // Garder l'ID du joueur pour compatibilité\n        };\n      });\n    } catch (error) {\n      console.error('Erreur lors de la récupération des joueurs du tournoi:', error);\n      throw error;\n    }\n  }\n\n  // Mettre à jour les données d'un joueur dans un tournoi\n  static async updateTournamentPlayer(tournamentId, playerId, updates) {\n    try {\n      const tournamentPlayer = await db.tournamentPlayers.where('tournamentId').equals(tournamentId).and(tp => tp.playerId === playerId).first();\n      if (!tournamentPlayer) {\n        throw new Error('Joueur non trouvé dans ce tournoi');\n      }\n      await db.tournamentPlayers.update(tournamentPlayer.id, updates);\n      return await this.getTournamentPlayers(tournamentId);\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour du joueur du tournoi:', error);\n      throw error;\n    }\n  }\n\n  // Retirer un joueur d'un tournoi\n  static async removePlayerFromTournament(tournamentId, playerId) {\n    try {\n      await db.tournamentPlayers.where('tournamentId').equals(tournamentId).and(tp => tp.playerId === playerId).delete();\n    } catch (error) {\n      console.error('Erreur lors du retrait du joueur du tournoi:', error);\n      throw error;\n    }\n  }\n\n  // Récupérer les joueurs actifs d'un tournoi\n  static async getActiveTournamentPlayers(tournamentId) {\n    try {\n      const allPlayers = await this.getTournamentPlayers(tournamentId);\n      return allPlayers.filter(player => player.isActive);\n    } catch (error) {\n      console.error('Erreur lors de la récupération des joueurs actifs:', error);\n      throw error;\n    }\n  }\n}\n\n// Service pour gérer les rounds\nexport class RoundService {\n  // Créer un nouveau round\n  static async createRound(tournamentId, roundData) {\n    try {\n      const round = {\n        ...roundData,\n        tournamentId\n      };\n      const id = await db.rounds.add(round);\n      return await db.rounds.get(id);\n    } catch (error) {\n      console.error('Erreur lors de la création du round:', error);\n      throw error;\n    }\n  }\n\n  // Récupérer tous les rounds d'un tournoi\n  static async getRounds(tournamentId) {\n    try {\n      return await db.rounds.where('tournamentId').equals(tournamentId).orderBy('roundNumber').toArray();\n    } catch (error) {\n      console.error('Erreur lors de la récupération des rounds:', error);\n      throw error;\n    }\n  }\n\n  // Mettre à jour un round\n  static async updateRound(id, updates) {\n    try {\n      await db.rounds.update(id, updates);\n      return await db.rounds.get(id);\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour du round:', error);\n      throw error;\n    }\n  }\n}\n\n// Service pour gérer les matches\nexport class MatchService {\n  // Créer un nouveau match\n  static async createMatch(tournamentId, roundId, matchData) {\n    try {\n      const match = {\n        ...matchData,\n        tournamentId,\n        roundId\n      };\n      const id = await db.matches.add(match);\n      return await db.matches.get(id);\n    } catch (error) {\n      console.error('Erreur lors de la création du match:', error);\n      throw error;\n    }\n  }\n\n  // Récupérer tous les matches d'un round\n  static async getMatchesForRound(tournamentId, roundNumber) {\n    try {\n      return await db.matches.where('tournamentId').equals(tournamentId).and(match => match.roundNumber === roundNumber).toArray();\n    } catch (error) {\n      console.error('Erreur lors de la récupération des matches:', error);\n      throw error;\n    }\n  }\n\n  // Mettre à jour un match\n  static async updateMatch(id, updates) {\n    try {\n      await db.matches.update(id, updates);\n      return await db.matches.get(id);\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour du match:', error);\n      throw error;\n    }\n  }\n\n  // Récupérer tous les matches d'un tournoi\n  static async getMatches(tournamentId) {\n    try {\n      return await db.matches.where('tournamentId').equals(tournamentId).toArray();\n    } catch (error) {\n      console.error('Erreur lors de la récupération des matches:', error);\n      throw error;\n    }\n  }\n}\n\n// Service pour l'export/import des données\nexport class DataService {\n  // Exporter les données d'un tournoi\n  static async exportTournament(tournamentId) {\n    try {\n      const data = await TournamentService.getTournamentData(tournamentId);\n      const exportData = {\n        ...data,\n        exportedAt: new Date().toISOString(),\n        version: '1.0'\n      };\n      const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n        type: 'application/json'\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `tournament_${data.tournament.name}_${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n      return exportData;\n    } catch (error) {\n      console.error('Erreur lors de l\\'export:', error);\n      throw error;\n    }\n  }\n\n  // Importer les données d'un tournoi\n  static async importTournament(file) {\n    try {\n      const text = await file.text();\n      const data = JSON.parse(text);\n      if (!data.version || !data.tournament) {\n        throw new Error('Format de fichier invalide');\n      }\n\n      // Créer le tournoi\n      const {\n        id: originalId,\n        ...tournamentData\n      } = data.tournament;\n      const tournament = await TournamentService.createTournament(tournamentData);\n\n      // Créer les joueurs\n      const playerMapping = {};\n      for (const player of data.players) {\n        const {\n          id: originalPlayerId,\n          tournamentId,\n          ...playerData\n        } = player;\n        const newPlayer = await PlayerService.addPlayer(tournament.id, playerData);\n        playerMapping[originalPlayerId] = newPlayer.id;\n      }\n\n      // Créer les rounds et matches\n      for (const round of data.rounds) {\n        const {\n          id: originalRoundId,\n          tournamentId,\n          ...roundData\n        } = round;\n        const newRound = await RoundService.createRound(tournament.id, roundData);\n\n        // Créer les matches pour ce round\n        const roundMatches = data.matches.filter(m => m.roundNumber === round.roundNumber);\n        for (const match of roundMatches) {\n          const {\n            id: originalMatchId,\n            tournamentId,\n            roundId,\n            player1Id,\n            player2Id,\n            ...matchData\n          } = match;\n          await MatchService.createMatch(tournament.id, newRound.id, {\n            ...matchData,\n            player1Id: playerMapping[player1Id],\n            player2Id: playerMapping[player2Id]\n          });\n        }\n      }\n      return tournament;\n    } catch (error) {\n      console.error('Erreur lors de l\\'import:', error);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["Dexie","TournamentDB","constructor","version","stores","tournaments","players","tournamentPlayers","rounds","matches","db","TournamentService","createTournament","tournamentData","id","add","get","error","console","getAllTournaments","orderBy","reverse","toArray","getTournament","updateTournament","updates","update","updatedAt","Date","toISOString","deleteTournament","transaction","delete","where","equals","getTournamentData","tournamentId","tournament","Promise","all","playerIds","map","tp","playerId","anyOf","playersWithTournamentData","player","find","p","PlayerService","createPlayer","playerData","isActive","createdAt","getAllPlayers","updatePlayer","deletePlayer","TournamentPlayerService","addPlayerToTournament","hero","existingEntry","and","first","Error","tournamentPlayer","wins","losses","draws","points","getTournamentPlayers","updateTournamentPlayer","removePlayerFromTournament","getActiveTournamentPlayers","allPlayers","filter","RoundService","createRound","roundData","round","getRounds","updateRound","MatchService","createMatch","roundId","matchData","match","getMatchesForRound","roundNumber","updateMatch","getMatches","DataService","exportTournament","data","exportData","exportedAt","blob","Blob","JSON","stringify","type","url","URL","createObjectURL","a","document","createElement","href","download","name","split","body","appendChild","click","removeChild","revokeObjectURL","importTournament","file","text","parse","originalId","playerMapping","originalPlayerId","newPlayer","addPlayer","originalRoundId","newRound","roundMatches","m","originalMatchId","player1Id","player2Id"],"sources":["D:/Projet/FaBSwiss/src/services/database.js"],"sourcesContent":["import Dexie from 'dexie';\r\n\r\n// Configuration de la base de données IndexedDB\r\nclass TournamentDB extends Dexie {\r\n  constructor() {\r\n    super('FABTournamentDB');\r\n    \r\n    this.version(1).stores({\r\n      tournaments: '++id, name, status, createdAt, updatedAt',\r\n      players: '++id, name, isActive, createdAt, updatedAt', // Joueurs globaux\r\n      tournamentPlayers: '++id, tournamentId, playerId, hero, wins, losses, draws, points', // Association tournoi-joueur\r\n      rounds: '++id, tournamentId, roundNumber, type, isComplete, createdAt',\r\n      matches: '++id, tournamentId, roundId, player1Id, player2Id, roundNumber, table, result, player1Games, player2Games, isActive'\r\n    });\r\n  }\r\n}\r\n\r\n// Instance de la base de données\r\nexport const db = new TournamentDB();\r\n\r\n// Service pour gérer les tournois\r\nexport class TournamentService {\r\n  \r\n  // Créer un nouveau tournoi\r\n  static async createTournament(tournamentData) {\r\n    try {\r\n      const id = await db.tournaments.add(tournamentData);\r\n      return await db.tournaments.get(id);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la création du tournoi:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Récupérer tous les tournois\r\n  static async getAllTournaments() {\r\n    try {\r\n      return await db.tournaments.orderBy('createdAt').reverse().toArray();\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des tournois:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Récupérer un tournoi par ID\r\n  static async getTournament(id) {\r\n    try {\r\n      return await db.tournaments.get(id);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération du tournoi:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Mettre à jour un tournoi\r\n  static async updateTournament(id, updates) {\r\n    try {\r\n      await db.tournaments.update(id, { ...updates, updatedAt: new Date().toISOString() });\r\n      return await db.tournaments.get(id);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la mise à jour du tournoi:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Supprimer un tournoi et toutes ses données associées\r\n  static async deleteTournament(id) {\r\n    try {\r\n      await db.transaction('rw', db.tournaments, db.tournamentPlayers, db.rounds, db.matches, async () => {\r\n        await db.tournaments.delete(id);\r\n        await db.tournamentPlayers.where('tournamentId').equals(id).delete();\r\n        await db.rounds.where('tournamentId').equals(id).delete();\r\n        await db.matches.where('tournamentId').equals(id).delete();\r\n      });\r\n    } catch (error) {\r\n      console.error('Erreur lors de la suppression du tournoi:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Récupérer les données complètes d'un tournoi\r\n  static async getTournamentData(tournamentId) {\r\n    try {\r\n      const [tournament, tournamentPlayers, rounds, matches] = await Promise.all([\r\n        db.tournaments.get(tournamentId),\r\n        db.tournamentPlayers.where('tournamentId').equals(tournamentId).toArray(),\r\n        db.rounds.where('tournamentId').equals(tournamentId).toArray(),\r\n        db.matches.where('tournamentId').equals(tournamentId).toArray()\r\n      ]);\r\n\r\n      // Récupérer les informations complètes des joueurs\r\n      const playerIds = tournamentPlayers.map(tp => tp.playerId);\r\n      const players = await db.players.where('id').anyOf(playerIds).toArray();\r\n      \r\n      // Fusionner les données des joueurs avec leurs stats de tournoi\r\n      const playersWithTournamentData = tournamentPlayers.map(tp => {\r\n        const player = players.find(p => p.id === tp.playerId);\r\n        return {\r\n          ...player,\r\n          ...tp,\r\n          id: tp.playerId // Garder l'ID du joueur pour compatibilité\r\n        };\r\n      });\r\n\r\n      return {\r\n        tournament,\r\n        players: playersWithTournamentData,\r\n        rounds,\r\n        matches\r\n      };\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des données du tournoi:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Service pour gérer les joueurs globaux\r\nexport class PlayerService {\r\n  \r\n  // Créer un nouveau joueur global\r\n  static async createPlayer(playerData) {\r\n    try {\r\n      const player = { \r\n        ...playerData, \r\n        isActive: true,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n      const id = await db.players.add(player);\r\n      return await db.players.get(id);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la création du joueur:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Récupérer tous les joueurs globaux\r\n  static async getAllPlayers() {\r\n    try {\r\n      return await db.players.orderBy('name').toArray();\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des joueurs:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Mettre à jour un joueur global\r\n  static async updatePlayer(id, updates) {\r\n    try {\r\n      await db.players.update(id, { ...updates, updatedAt: new Date().toISOString() });\r\n      return await db.players.get(id);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la mise à jour du joueur:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Supprimer un joueur global\r\n  static async deletePlayer(id) {\r\n    try {\r\n      await db.players.delete(id);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la suppression du joueur:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Service pour gérer la participation des joueurs aux tournois\r\nexport class TournamentPlayerService {\r\n  \r\n  // Ajouter un joueur à un tournoi\r\n  static async addPlayerToTournament(tournamentId, playerId, hero = null) {\r\n    try {\r\n      const existingEntry = await db.tournamentPlayers\r\n        .where('tournamentId').equals(tournamentId)\r\n        .and(tp => tp.playerId === playerId)\r\n        .first();\r\n      \r\n      if (existingEntry) {\r\n        throw new Error('Ce joueur est déjà inscrit à ce tournoi');\r\n      }\r\n\r\n      const tournamentPlayer = {\r\n        tournamentId,\r\n        playerId,\r\n        hero,\r\n        wins: 0,\r\n        losses: 0,\r\n        draws: 0,\r\n        points: 0,\r\n        isActive: true\r\n      };\r\n      \r\n      const id = await db.tournamentPlayers.add(tournamentPlayer);\r\n      return await db.tournamentPlayers.get(id);\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'ajout du joueur au tournoi:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Récupérer tous les joueurs d'un tournoi avec leurs informations complètes\r\n  static async getTournamentPlayers(tournamentId) {\r\n    try {\r\n      const tournamentPlayers = await db.tournamentPlayers\r\n        .where('tournamentId').equals(tournamentId).toArray();\r\n      \r\n      const playerIds = tournamentPlayers.map(tp => tp.playerId);\r\n      const players = await db.players.where('id').anyOf(playerIds).toArray();\r\n      \r\n      return tournamentPlayers.map(tp => {\r\n        const player = players.find(p => p.id === tp.playerId);\r\n        return {\r\n          ...player,\r\n          ...tp,\r\n          id: tp.playerId // Garder l'ID du joueur pour compatibilité\r\n        };\r\n      });\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des joueurs du tournoi:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Mettre à jour les données d'un joueur dans un tournoi\r\n  static async updateTournamentPlayer(tournamentId, playerId, updates) {\r\n    try {\r\n      const tournamentPlayer = await db.tournamentPlayers\r\n        .where('tournamentId').equals(tournamentId)\r\n        .and(tp => tp.playerId === playerId)\r\n        .first();\r\n      \r\n      if (!tournamentPlayer) {\r\n        throw new Error('Joueur non trouvé dans ce tournoi');\r\n      }\r\n\r\n      await db.tournamentPlayers.update(tournamentPlayer.id, updates);\r\n      return await this.getTournamentPlayers(tournamentId);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la mise à jour du joueur du tournoi:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Retirer un joueur d'un tournoi\r\n  static async removePlayerFromTournament(tournamentId, playerId) {\r\n    try {\r\n      await db.tournamentPlayers\r\n        .where('tournamentId').equals(tournamentId)\r\n        .and(tp => tp.playerId === playerId)\r\n        .delete();\r\n    } catch (error) {\r\n      console.error('Erreur lors du retrait du joueur du tournoi:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Récupérer les joueurs actifs d'un tournoi\r\n  static async getActiveTournamentPlayers(tournamentId) {\r\n    try {\r\n      const allPlayers = await this.getTournamentPlayers(tournamentId);\r\n      return allPlayers.filter(player => player.isActive);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des joueurs actifs:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Service pour gérer les rounds\r\nexport class RoundService {\r\n  \r\n  // Créer un nouveau round\r\n  static async createRound(tournamentId, roundData) {\r\n    try {\r\n      const round = { ...roundData, tournamentId };\r\n      const id = await db.rounds.add(round);\r\n      return await db.rounds.get(id);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la création du round:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Récupérer tous les rounds d'un tournoi\r\n  static async getRounds(tournamentId) {\r\n    try {\r\n      return await db.rounds.where('tournamentId').equals(tournamentId)\r\n        .orderBy('roundNumber').toArray();\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des rounds:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Mettre à jour un round\r\n  static async updateRound(id, updates) {\r\n    try {\r\n      await db.rounds.update(id, updates);\r\n      return await db.rounds.get(id);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la mise à jour du round:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Service pour gérer les matches\r\nexport class MatchService {\r\n  \r\n  // Créer un nouveau match\r\n  static async createMatch(tournamentId, roundId, matchData) {\r\n    try {\r\n      const match = { ...matchData, tournamentId, roundId };\r\n      const id = await db.matches.add(match);\r\n      return await db.matches.get(id);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la création du match:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Récupérer tous les matches d'un round\r\n  static async getMatchesForRound(tournamentId, roundNumber) {\r\n    try {\r\n      return await db.matches.where('tournamentId').equals(tournamentId)\r\n        .and(match => match.roundNumber === roundNumber).toArray();\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des matches:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Mettre à jour un match\r\n  static async updateMatch(id, updates) {\r\n    try {\r\n      await db.matches.update(id, updates);\r\n      return await db.matches.get(id);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la mise à jour du match:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Récupérer tous les matches d'un tournoi\r\n  static async getMatches(tournamentId) {\r\n    try {\r\n      return await db.matches.where('tournamentId').equals(tournamentId).toArray();\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des matches:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Service pour l'export/import des données\r\nexport class DataService {\r\n  \r\n  // Exporter les données d'un tournoi\r\n  static async exportTournament(tournamentId) {\r\n    try {\r\n      const data = await TournamentService.getTournamentData(tournamentId);\r\n      const exportData = {\r\n        ...data,\r\n        exportedAt: new Date().toISOString(),\r\n        version: '1.0'\r\n      };\r\n      \r\n      const blob = new Blob([JSON.stringify(exportData, null, 2)], {\r\n        type: 'application/json'\r\n      });\r\n      \r\n      const url = URL.createObjectURL(blob);\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = `tournament_${data.tournament.name}_${new Date().toISOString().split('T')[0]}.json`;\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n      URL.revokeObjectURL(url);\r\n      \r\n      return exportData;\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'export:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Importer les données d'un tournoi\r\n  static async importTournament(file) {\r\n    try {\r\n      const text = await file.text();\r\n      const data = JSON.parse(text);\r\n      \r\n      if (!data.version || !data.tournament) {\r\n        throw new Error('Format de fichier invalide');\r\n      }\r\n\r\n      // Créer le tournoi\r\n      const { id: originalId, ...tournamentData } = data.tournament;\r\n      const tournament = await TournamentService.createTournament(tournamentData);\r\n      \r\n      // Créer les joueurs\r\n      const playerMapping = {};\r\n      for (const player of data.players) {\r\n        const { id: originalPlayerId, tournamentId, ...playerData } = player;\r\n        const newPlayer = await PlayerService.addPlayer(tournament.id, playerData);\r\n        playerMapping[originalPlayerId] = newPlayer.id;\r\n      }\r\n\r\n      // Créer les rounds et matches\r\n      for (const round of data.rounds) {\r\n        const { id: originalRoundId, tournamentId, ...roundData } = round;\r\n        const newRound = await RoundService.createRound(tournament.id, roundData);\r\n        \r\n        // Créer les matches pour ce round\r\n        const roundMatches = data.matches.filter(m => m.roundNumber === round.roundNumber);\r\n        for (const match of roundMatches) {\r\n          const { id: originalMatchId, tournamentId, roundId, player1Id, player2Id, ...matchData } = match;\r\n          await MatchService.createMatch(tournament.id, newRound.id, {\r\n            ...matchData,\r\n            player1Id: playerMapping[player1Id],\r\n            player2Id: playerMapping[player2Id]\r\n          });\r\n        }\r\n      }\r\n\r\n      return tournament;\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'import:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}