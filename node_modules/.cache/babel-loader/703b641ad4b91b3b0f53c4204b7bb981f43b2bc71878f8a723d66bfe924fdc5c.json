{"ast":null,"code":"// Types et modèles pour l'application de tournoi Flesh and Blood\n\nexport const HERO_CLASSES = {\n  BRUTE: 'Brute',\n  GUARDIAN: 'Guardian',\n  NINJA: 'Ninja',\n  RANGER: 'Ranger',\n  RUNEBLADE: 'Runeblade',\n  WARRIOR: 'Warrior',\n  WIZARD: 'Wizard',\n  MECHANOLOGIST: 'Mechanologist',\n  GENERIC: 'Generic',\n  LIGHT_WARRIOR: 'Light Warrior',\n  SHADOW_BRUTE: 'Shadow Brute',\n  ELEMENTAL_RANGER: 'Elemental Ranger',\n  DRACONIC_ILLUSIONIST: 'Draconic Illusionist',\n  EARTH_GUARDIAN: 'Earth Guardian'\n};\nexport const HEROES = {\n  // Brute\n  'Rhinar': HERO_CLASSES.BRUTE,\n  'Kayo': HERO_CLASSES.BRUTE,\n  'Barraging Beatdown': HERO_CLASSES.BRUTE,\n  // Guardian\n  'Bravo': HERO_CLASSES.GUARDIAN,\n  'Valda Brightaxe': HERO_CLASSES.GUARDIAN,\n  'Terra': HERO_CLASSES.EARTH_GUARDIAN,\n  // Ninja\n  'Katsu': HERO_CLASSES.NINJA,\n  'Benji': HERO_CLASSES.NINJA,\n  // Ranger\n  'Azalea': HERO_CLASSES.RANGER,\n  'Lexi': HERO_CLASSES.ELEMENTAL_RANGER,\n  // Runeblade\n  'Viserai': HERO_CLASSES.RUNEBLADE,\n  'Chane': HERO_CLASSES.RUNEBLADE,\n  // Warrior\n  'Dorinthea': HERO_CLASSES.WARRIOR,\n  'Boltyn': HERO_CLASSES.LIGHT_WARRIOR,\n  'Kassai': HERO_CLASSES.WARRIOR,\n  // Wizard\n  'Kano': HERO_CLASSES.WIZARD,\n  'Iyslander': HERO_CLASSES.WIZARD,\n  // Mechanologist\n  'Dash': HERO_CLASSES.MECHANOLOGIST,\n  'Data Doll MKII': HERO_CLASSES.MECHANOLOGIST,\n  // Illusionist\n  'Prism': HERO_CLASSES.DRACONIC_ILLUSIONIST,\n  'Dromai': HERO_CLASSES.DRACONIC_ILLUSIONIST,\n  // Generic\n  'Shiyana': HERO_CLASSES.GENERIC\n};\nexport const TOURNAMENT_STATUS = {\n  SETUP: 'setup',\n  SWISS_ROUNDS: 'swiss_rounds',\n  TOP_CUT: 'top_cut',\n  FINISHED: 'finished'\n};\nexport const MATCH_RESULT = {\n  PLAYER1_WIN: 'player1_win',\n  PLAYER2_WIN: 'player2_win',\n  DRAW: 'draw',\n  PENDING: 'pending'\n};\nexport const ROUND_TYPE = {\n  SWISS: 'swiss',\n  ELIMINATION: 'elimination'\n};\n\n// Fonction utilitaire pour créer un nouveau joueur\nexport const createPlayer = (name, hero = null) => ({\n  id: crypto.randomUUID(),\n  name: name.trim(),\n  hero: hero,\n  isActive: true,\n  wins: 0,\n  losses: 0,\n  draws: 0,\n  points: 0,\n  tiebreakers: {\n    opponentMatchWinPercentage: 0,\n    gameWinPercentage: 0,\n    opponentGameWinPercentage: 0\n  }\n});\n\n// Fonction utilitaire pour créer un nouveau match\nexport const createMatch = (player1Id, player2Id, roundNumber, table = null) => ({\n  id: crypto.randomUUID(),\n  player1Id,\n  player2Id,\n  roundNumber,\n  table,\n  result: MATCH_RESULT.PENDING,\n  player1Games: 0,\n  player2Games: 0,\n  isActive: true\n});\n\n// Fonction utilitaire pour créer un nouveau tournoi\nexport const createTournament = name => ({\n  id: crypto.randomUUID(),\n  name: name.trim(),\n  status: TOURNAMENT_STATUS.SETUP,\n  players: [],\n  rounds: [],\n  currentRound: 0,\n  topCutSize: 8,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n});\n\n// Fonction utilitaire pour créer un nouveau round\nexport const createRound = (roundNumber, type = ROUND_TYPE.SWISS) => ({\n  id: crypto.randomUUID(),\n  roundNumber,\n  type,\n  matches: [],\n  isComplete: false,\n  createdAt: new Date().toISOString()\n});","map":{"version":3,"names":["HERO_CLASSES","BRUTE","GUARDIAN","NINJA","RANGER","RUNEBLADE","WARRIOR","WIZARD","MECHANOLOGIST","GENERIC","LIGHT_WARRIOR","SHADOW_BRUTE","ELEMENTAL_RANGER","DRACONIC_ILLUSIONIST","EARTH_GUARDIAN","HEROES","TOURNAMENT_STATUS","SETUP","SWISS_ROUNDS","TOP_CUT","FINISHED","MATCH_RESULT","PLAYER1_WIN","PLAYER2_WIN","DRAW","PENDING","ROUND_TYPE","SWISS","ELIMINATION","createPlayer","name","hero","id","crypto","randomUUID","trim","isActive","wins","losses","draws","points","tiebreakers","opponentMatchWinPercentage","gameWinPercentage","opponentGameWinPercentage","createMatch","player1Id","player2Id","roundNumber","table","result","player1Games","player2Games","createTournament","status","players","rounds","currentRound","topCutSize","createdAt","Date","toISOString","updatedAt","createRound","type","matches","isComplete"],"sources":["D:/Projet/FaBSwiss/src/models/types.js"],"sourcesContent":["// Types et modèles pour l'application de tournoi Flesh and Blood\r\n\r\nexport const HERO_CLASSES = {\r\n  BRUTE: 'Brute',\r\n  GUARDIAN: 'Guardian', \r\n  NINJA: 'Ninja',\r\n  RANGER: 'Ranger',\r\n  RUNEBLADE: 'Runeblade',\r\n  WARRIOR: 'Warrior',\r\n  WIZARD: 'Wizard',\r\n  MECHANOLOGIST: 'Mechanologist',\r\n  GENERIC: 'Generic',\r\n  LIGHT_WARRIOR: 'Light Warrior',\r\n  SHADOW_BRUTE: 'Shadow Brute',\r\n  ELEMENTAL_RANGER: 'Elemental Ranger',\r\n  DRACONIC_ILLUSIONIST: 'Draconic Illusionist',\r\n  EARTH_GUARDIAN: 'Earth Guardian'\r\n};\r\n\r\nexport const HEROES = {\r\n  // Brute\r\n  'Rhinar': HERO_CLASSES.BRUTE,\r\n  'Kayo': HERO_CLASSES.BRUTE,\r\n  'Barraging Beatdown': HERO_CLASSES.BRUTE,\r\n  \r\n  // Guardian\r\n  'Bravo': HERO_CLASSES.GUARDIAN,\r\n  'Valda Brightaxe': HERO_CLASSES.GUARDIAN,\r\n  'Terra': HERO_CLASSES.EARTH_GUARDIAN,\r\n  \r\n  // Ninja\r\n  'Katsu': HERO_CLASSES.NINJA,\r\n  'Benji': HERO_CLASSES.NINJA,\r\n  \r\n  // Ranger\r\n  'Azalea': HERO_CLASSES.RANGER,\r\n  'Lexi': HERO_CLASSES.ELEMENTAL_RANGER,\r\n  \r\n  // Runeblade\r\n  'Viserai': HERO_CLASSES.RUNEBLADE,\r\n  'Chane': HERO_CLASSES.RUNEBLADE,\r\n  \r\n  // Warrior\r\n  'Dorinthea': HERO_CLASSES.WARRIOR,\r\n  'Boltyn': HERO_CLASSES.LIGHT_WARRIOR,\r\n  'Kassai': HERO_CLASSES.WARRIOR,\r\n  \r\n  // Wizard\r\n  'Kano': HERO_CLASSES.WIZARD,\r\n  'Iyslander': HERO_CLASSES.WIZARD,\r\n  \r\n  // Mechanologist\r\n  'Dash': HERO_CLASSES.MECHANOLOGIST,\r\n  'Data Doll MKII': HERO_CLASSES.MECHANOLOGIST,\r\n  \r\n  // Illusionist\r\n  'Prism': HERO_CLASSES.DRACONIC_ILLUSIONIST,\r\n  'Dromai': HERO_CLASSES.DRACONIC_ILLUSIONIST,\r\n  \r\n  // Generic\r\n  'Shiyana': HERO_CLASSES.GENERIC\r\n};\r\n\r\nexport const TOURNAMENT_STATUS = {\r\n  SETUP: 'setup',\r\n  SWISS_ROUNDS: 'swiss_rounds',\r\n  TOP_CUT: 'top_cut',\r\n  FINISHED: 'finished'\r\n};\r\n\r\nexport const MATCH_RESULT = {\r\n  PLAYER1_WIN: 'player1_win',\r\n  PLAYER2_WIN: 'player2_win',\r\n  DRAW: 'draw',\r\n  PENDING: 'pending'\r\n};\r\n\r\nexport const ROUND_TYPE = {\r\n  SWISS: 'swiss',\r\n  ELIMINATION: 'elimination'\r\n};\r\n\r\n// Fonction utilitaire pour créer un nouveau joueur\r\nexport const createPlayer = (name, hero = null) => ({\r\n  id: crypto.randomUUID(),\r\n  name: name.trim(),\r\n  hero: hero,\r\n  isActive: true,\r\n  wins: 0,\r\n  losses: 0,\r\n  draws: 0,\r\n  points: 0,\r\n  tiebreakers: {\r\n    opponentMatchWinPercentage: 0,\r\n    gameWinPercentage: 0,\r\n    opponentGameWinPercentage: 0\r\n  }\r\n});\r\n\r\n// Fonction utilitaire pour créer un nouveau match\r\nexport const createMatch = (player1Id, player2Id, roundNumber, table = null) => ({\r\n  id: crypto.randomUUID(),\r\n  player1Id,\r\n  player2Id,\r\n  roundNumber,\r\n  table,\r\n  result: MATCH_RESULT.PENDING,\r\n  player1Games: 0,\r\n  player2Games: 0,\r\n  isActive: true\r\n});\r\n\r\n// Fonction utilitaire pour créer un nouveau tournoi\r\nexport const createTournament = (name) => ({\r\n  id: crypto.randomUUID(),\r\n  name: name.trim(),\r\n  status: TOURNAMENT_STATUS.SETUP,\r\n  players: [],\r\n  rounds: [],\r\n  currentRound: 0,\r\n  topCutSize: 8,\r\n  createdAt: new Date().toISOString(),\r\n  updatedAt: new Date().toISOString()\r\n});\r\n\r\n// Fonction utilitaire pour créer un nouveau round\r\nexport const createRound = (roundNumber, type = ROUND_TYPE.SWISS) => ({\r\n  id: crypto.randomUUID(),\r\n  roundNumber,\r\n  type,\r\n  matches: [],\r\n  isComplete: false,\r\n  createdAt: new Date().toISOString()\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}